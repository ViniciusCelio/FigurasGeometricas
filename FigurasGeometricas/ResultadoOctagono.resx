<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        yNxa8fHdw+F/MVEB4Qh3TNIAAAAASUVORK5CYII=
</value>
  </data>
</root>